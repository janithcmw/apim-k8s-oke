apiVersion: v1
kind: Secret
metadata:
  name: {{ template "apim-320-dist-oke.resource.prefix" . }}-certificate-secret
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVVVENDQXptZ0F3SUJBZ0lVTVFZakZ4VlJwcktmWHgrVG1WaFBESTJrSzhRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2N6RUxNQWtHQTFVRUJoTUNVMHd4R2pBWUJnTlZCQWdNRVZOdmRYUm9aWEp1SUZCeWIzWnBibU5sTVE0dwpEQVlEVlFRSERBVkhZV3hzWlRFTk1Bc0dBMVVFQ2d3RWFtTnRkekVSTUE4R0ExVUVDd3dJYW1OdGR5NWpiMjB4CkZqQVVCZ05WQkFNTURTb3VZVzB1ZDNOdk1pNWpiMjB3SGhjTk1qUXhNREkxTWpBMU9EQTFXaGNOTWpVeE1ESTEKTWpBMU9EQTFXakJ6TVFzd0NRWURWUVFHRXdKVFRERWFNQmdHQTFVRUNBd1JVMjkxZEdobGNtNGdVSEp2ZG1sdQpZMlV4RGpBTUJnTlZCQWNNQlVkaGJHeGxNUTB3Q3dZRFZRUUtEQVJxWTIxM01SRXdEd1lEVlFRTERBaHFZMjEzCkxtTnZiVEVXTUJRR0ExVUVBd3dOS2k1aGJTNTNjMjh5TG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFMK1VPRGhvdzhwazlhSGRsWkI5VFE2TmZCdTlXK3VxZEhuYjhTM3QwNWVNaWpHRQp0WmtrQkJQUkRQQzluRzV6aFZrVXRhSU9xczhIa0prRVZmL0dCeHpVeWtXOHd1QW5HSlBOa2k1RUxIbmtEeFBYCmJkbS9Ob0I2ald4em82bHRDdVRXVWQrbGh5a0J3T2U2c0FaZ251UmhrQ3ZubkdLaitLN1BnR3hxSUNYWkFya0UKWDF4MHdESWxlQ3FMcmN1RXlpZzBrcDRmMmE0SjlHdTFpRHRxVERmcTFzWUpJL3R6L1VnWnJJZ2JOUkFSMzNKLwpxTWpmRGhVY3lFRXNSLzJhVk1CNi9uTzZjcGVPUUNnTVYzbFZLZDdMam12aUxMRkVpM1o3VWtMajRSSjA1cnhvCi9qdDM3d0pua0JaWFZFRjdqNFVDQmNXRXFFWDdMdWtpZVFUVVE4c0NBd0VBQWFPQjNEQ0IyVENCcWdZRFZSMFIKQklHaU1JR2ZnZzBxTG1GdExuZHpiekl1WTI5dGdoVmhibUZzZVhScFkzTXVZVzB1ZDNOdk1pNWpiMjJDRldSbApkbkJ2Y25SaGJDNWhiUzUzYzI4eUxtTnZiWUlUWjJGMFpYZGhlUzVoYlM1M2MyOHlMbU52YllJVmNIVmliR2x6CmFHVnlMbUZ0TG5kemJ6SXVZMjl0Z2h0MGNtRm1abWxqTG0xaGJtRm5aWEl1WVcwdWQzTnZNaTVqYjIyQ0YydGwKZVM1dFlXNWhaMlZ5TG1GdExuZHpiekl1WTI5dE1Bc0dBMVVkRHdRRUF3SUU4REFkQmdOVkhRNEVGZ1FVYk4vWQpuVFBMNkNhV0JpRFpvSzRaZWtoanE5RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRFZQT2grMUp3WDY2NWJiCk4xV2lLM0VZNm04K3ArYTErSUVoTkhwaHZlV2ZoWGE2VnNlWnBGb2NIQW1FdFFZN0NQdEdWVHBWMmZIWFhnOFUKVEtnOGxKUWpEc0V0Und4NnBIanA4STlpWEVxQlBFZWdFYyszREY4cU82WWpwaXM4eVhZamNVek1mN1pLT0wzbApETGdWc0wrenRvanVpRTd5Q1dvdnM4VGJYN0w2K3JCRVMrVEF1b1VjMUhLQzNGaTAzYnZrSzBEZk91aXg1c1hwCkZKN2VBc3dlS0pEL3kxeTc5Rll5UnNONW1jU2VoUzVBa1JoRUJpT2dGTWJpODkrY0p1WkhNbStFVTNDZWdZMWkKZUM4SGxYNHdRMElRcWRQdWg0MDNNVTBEeTRlQlBVdG9IdFVCSUNFcHFKb1NXbnJnTHBERHM4RHVHelZjejNVOApZd1hGMUZrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQpNSUlGTlRCZkJna3Foa2lHOXcwQkJRMHdVakF4QmdrcWhraUc5dzBCQlF3d0pBUVFlUGJjeThHcUFUTks1SUllCmZaR1UwQUlDQ0FBd0RBWUlLb1pJaHZjTkFna0ZBREFkQmdsZ2hrZ0JaUU1FQVNvRUVGcThRdVppSEZqcDNWU1AKWXBxbTdLVUVnZ1RRUGU2RnAvN2JIMGJ0VFZwc3dzSTJLdndUZXBJcW9ZQUk0ZTlnUWhUK0pOVlkrY2hTTXRoTgp1aUl1aFJmdG5MSnZUU1hSWjNrTWwwemlIcGdCckFzNFg5RC9wSElnb2cxWjNIbVdreHB2RG0vWEkxOGh4Ly9wCnY2Uk5xS0RZT2pjMWp3NWFzdTRzVDNPNlZHTGhmelRNalVpZUFNWFVUbUFzOFhEOHgra3BpL1doT08yM1p2OWYKY012eUI1SldQVWNua0hxQTJQQU9udmNXOEliSXJiUU1VcG5QUC9uUVljWExqeFRXU28vK3BnL3U5RU9XT3ZtRAo2VUpDcXBqODkrcHJhZmVnTkQ1T2VJWndzemRPVTdLei9LSnZnTU9CSXB6TlFvaFlqNzRjTEQxQnFJWnA4REhhCkZuUjRUV2xLRFN4aHJKWkd1RnBLRitKTDVsRndYUmU5emx6QjNsbnNyM3A0MFBhNDdPWWlxK0VtUXd2SGpyMkwKQmY3cUJiS0o2ZHpyYkFhREEwNUZxTng3QmZKZUVwbXRZOTZMcU8vaDNUeWIwNmhNbDUxVW5aZkh0UzRzVDIxaApGYVVwMTJlbzVOdWlKdkdSeXlMSXg0UnBnNFZjaHNka3RPUjY4U0h2VjdGeHNiVTgwS2RFMnFuWEtMYUFOMVdxCmtpSVpRR2cram5SYVhnMlRoL2tYdkpHT0lYNnpwd0xiSGh1cTRqWmdXeklxNlRvZnZ0RldWallYbFlSMmxOVXMKeXM3ZkZ1alUwVktrV2lzd1htV082REgzeW1BNzZoVjFCT09vY1dqV1p0RzlLWUVERlhDWUVvKzg5Qnd4b2dJbQp4VmVQY2grZFQyNnJBc3c0ZWljUDVzMzN5WW9pcCt1bmRkd3lsWm8rNVoyV1YyZzRIVDFhUWZVa2RFd1ZUR0VECmpNaFVGVVZERUVubGY4Ync3SWNhVE9yMVVPUWYwUlV1MDRVZUx3SGtvU2ZGMnBOZE8wSEtQalF6cHBhT04zMFUKNElqelFHOTFFL255RXMvc3pWT01TaEpQNEYyVmhnWjYzWXB2S3JZdGNYQ05MclFlS0ZuZzFLTW44bjR0bnpObgpab3ByQktkOHlKQUdjcnhHcXpnRnFpS2o0dmxHYWZXeTkrUk9UYkJjblZRMHRiQ1Z6bTZldHcxSlNUckFHTTZwClkxTmVyT3pZTGR3SVNOWG1Xa3ZSbnV5cFZOd2tJMnZlcEo0WG5BN2R6YlBVVkFDMERQcmVDL1NyUE5nZkprZFoKQWV1RlRMTlZZT0xEQlRxQVVrS0RSSmlCaTZYYTdpNEVaNW1CUUVCangwRXE2MWF4anFYS0tXeU51eVpReXlwNQpvM25oZk1JcmlubWQ0RlpETnNpSVVXLytnTzk5Z25OMGJsVGpTUDFKckZ4VG8rbnFHazhsRWVmaE85N1YxS1VTCkVJZ1NMb3oxZW1vL253aHlRejRHN0JoeDNCaXUvVFQxaFJ2emJQeFZNakxzUm1DcjN3U2pnekwwYm1zcTFRcksKTzl2ME82R0d4S1ZQbWYrQkNMcnNQN2dYa3hnRFlWVkhjS0ttaFNsMm0vNGROQjRuYk5zdmVldE9YcnZWTnVxWgpRM1BRQVpXOW5OWk1VRjVHakhHeG9WSU12M3AzN2hXeWhPS1poQWJZdGRFcis0Wms3Rm50UVp1cnBxaXRwdktRCjZhUzlCMVYrSElYSWY0NUkwTk8wYXpvUk45RHF5MFFWZkpTUlhudVpPaFpzRUQ1NjZlcFkxRERiZ001elpMQlIKeGhHNnczTFRpMzQxY3kyV1hmYm1wUUVDZndqTFhPcWYwcUREc1RyTFA2NnZPTGNzYmsxRWdOeWtGUjFXOHhULwpSdUNlclFWMHVsemVTUURSemo4c204cWUvNkYxNnJQWlUxOGFjM21Od3ExbmhsYWZoUWxNNWlHT1czMkxFakd1CkFld2ViclY2U0tRVE9yOUYraXpZRGp4STVESHdEOURKTGFtM1NJRzBnNzcrcHdYMklKckpsTEdObDkxNk15eXcKREIyd3A3MXFSbEExQzNYUVJweG1UQXRqOEZKVGxPRXhWbTlobUU5RFdwVi9mMWxXaCtjM2xPQnl5TlR6TnNwOApzYkF6TWtKUE1lcmR2UnBRRVZyVTRWUGQwbmF6MEhoMGVrT2NVSmJ1NHlDZm9wR3NVUXVXeEpVPQotLS0tLUVORCBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQ==

#For this, you can generate either keys with passwords or without passwords. Having password-protected keys is not
#relevant since we are adding the content of the keys. If password-protected keys are needed:
#  1. Generate the key: openssl genpkey -algorithm RSA -out private.key -aes256 -pkeyopt rsa_keygen_bits:2048
#  2. Generate the certificate: openssl req -x509 -days 365 -key private.key -out certificate.crt \
#                               -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                               -extensions v3_req -config <(echo "[req]"; \
#                               echo distinguished_name=req; \
#                               echo "[v3_req]"; \
#                               echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:devportal.am.wso2.com,DNS:gateway.am.wso2.com,DNS:publisher.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com"; \
#                               echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment")
#  3. Generate keystore if required: openssl pkcs12 -export -in certificate.crt -inkey private.key -out keystore.p12 -name wso2carbon
#                                    keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore wso2carbon.jks -deststoretype JKS
#                                    keytool -export -keystore wso2carbon.jks -alias wso2carbon -file wso2carbon.crt
#                                    keytool -import -alias wso2carbon -file wso2carbon.crt -keystore client-truststore.jks
#
#If there is no requirement to use password-protected keys:
#  1. Generate the key and certificate: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -config san.conf
#
#Then, base64 encode the content and add it to tls.crt and tls.key:
#  1.  cat certificate.crt | base64 -w 0
#  2.  cat private.key | base64 -w 0
