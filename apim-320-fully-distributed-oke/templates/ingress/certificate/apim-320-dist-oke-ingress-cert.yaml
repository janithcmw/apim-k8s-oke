apiVersion: v1
kind: Secret
metadata:
  name: {{ template "apim-320-dist-oke.resource.prefix" . }}-certificate-secret
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVVVENDQXptZ0F3SUJBZ0lVTVFZakZ4VlJwcktmWHgrVG1WaFBESTJrSzhRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2N6RUxNQWtHQTFVRUJoTUNVMHd4R2pBWUJnTlZCQWdNRVZOdmRYUm9aWEp1SUZCeWIzWnBibU5sTVE0dwpEQVlEVlFRSERBVkhZV3hzWlRFTk1Bc0dBMVVFQ2d3RWFtTnRkekVSTUE4R0ExVUVDd3dJYW1OdGR5NWpiMjB4CkZqQVVCZ05WQkFNTURTb3VZVzB1ZDNOdk1pNWpiMjB3SGhjTk1qUXhNREkxTWpBMU9EQTFXaGNOTWpVeE1ESTEKTWpBMU9EQTFXakJ6TVFzd0NRWURWUVFHRXdKVFRERWFNQmdHQTFVRUNBd1JVMjkxZEdobGNtNGdVSEp2ZG1sdQpZMlV4RGpBTUJnTlZCQWNNQlVkaGJHeGxNUTB3Q3dZRFZRUUtEQVJxWTIxM01SRXdEd1lEVlFRTERBaHFZMjEzCkxtTnZiVEVXTUJRR0ExVUVBd3dOS2k1aGJTNTNjMjh5TG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFMK1VPRGhvdzhwazlhSGRsWkI5VFE2TmZCdTlXK3VxZEhuYjhTM3QwNWVNaWpHRQp0WmtrQkJQUkRQQzluRzV6aFZrVXRhSU9xczhIa0prRVZmL0dCeHpVeWtXOHd1QW5HSlBOa2k1RUxIbmtEeFBYCmJkbS9Ob0I2ald4em82bHRDdVRXVWQrbGh5a0J3T2U2c0FaZ251UmhrQ3ZubkdLaitLN1BnR3hxSUNYWkFya0UKWDF4MHdESWxlQ3FMcmN1RXlpZzBrcDRmMmE0SjlHdTFpRHRxVERmcTFzWUpJL3R6L1VnWnJJZ2JOUkFSMzNKLwpxTWpmRGhVY3lFRXNSLzJhVk1CNi9uTzZjcGVPUUNnTVYzbFZLZDdMam12aUxMRkVpM1o3VWtMajRSSjA1cnhvCi9qdDM3d0pua0JaWFZFRjdqNFVDQmNXRXFFWDdMdWtpZVFUVVE4c0NBd0VBQWFPQjNEQ0IyVENCcWdZRFZSMFIKQklHaU1JR2ZnZzBxTG1GdExuZHpiekl1WTI5dGdoVmhibUZzZVhScFkzTXVZVzB1ZDNOdk1pNWpiMjJDRldSbApkbkJ2Y25SaGJDNWhiUzUzYzI4eUxtTnZiWUlUWjJGMFpYZGhlUzVoYlM1M2MyOHlMbU52YllJVmNIVmliR2x6CmFHVnlMbUZ0TG5kemJ6SXVZMjl0Z2h0MGNtRm1abWxqTG0xaGJtRm5aWEl1WVcwdWQzTnZNaTVqYjIyQ0YydGwKZVM1dFlXNWhaMlZ5TG1GdExuZHpiekl1WTI5dE1Bc0dBMVVkRHdRRUF3SUU4REFkQmdOVkhRNEVGZ1FVYk4vWQpuVFBMNkNhV0JpRFpvSzRaZWtoanE5RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRFZQT2grMUp3WDY2NWJiCk4xV2lLM0VZNm04K3ArYTErSUVoTkhwaHZlV2ZoWGE2VnNlWnBGb2NIQW1FdFFZN0NQdEdWVHBWMmZIWFhnOFUKVEtnOGxKUWpEc0V0Und4NnBIanA4STlpWEVxQlBFZWdFYyszREY4cU82WWpwaXM4eVhZamNVek1mN1pLT0wzbApETGdWc0wrenRvanVpRTd5Q1dvdnM4VGJYN0w2K3JCRVMrVEF1b1VjMUhLQzNGaTAzYnZrSzBEZk91aXg1c1hwCkZKN2VBc3dlS0pEL3kxeTc5Rll5UnNONW1jU2VoUzVBa1JoRUJpT2dGTWJpODkrY0p1WkhNbStFVTNDZWdZMWkKZUM4SGxYNHdRMElRcWRQdWg0MDNNVTBEeTRlQlBVdG9IdFVCSUNFcHFKb1NXbnJnTHBERHM4RHVHelZjejNVOApZd1hGMUZrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQy9sRGc0YU1QS1pQV2gKM1pXUWZVME9qWHdidlZ2cnFuUjUyL0V0N2RPWGpJb3hoTFdaSkFRVDBRend2Wnh1YzRWWkZMV2lEcXJQQjVDWgpCRlgveGdjYzFNcEZ2TUxnSnhpVHpaSXVSQ3g1NUE4VDEyM1p2emFBZW8xc2M2T3BiUXJrMWxIZnBZY3BBY0RuCnVyQUdZSjdrWVpBcjU1eGlvL2l1ejRCc2FpQWwyUUs1QkY5Y2RNQXlKWGdxaTYzTGhNb29OSktlSDltdUNmUnIKdFlnN2FrdzM2dGJHQ1NQN2MvMUlHYXlJR3pVUUVkOXlmNmpJM3c0VkhNaEJMRWY5bWxUQWV2NXp1bktYamtBbwpERmQ1VlNuZXk0NXI0aXl4Ukl0MmUxSkM0K0VTZE9hOGFQNDdkKzhDWjVBV1YxUkJlNCtGQWdYRmhLaEYreTdwCklua0UxRVBMQWdNQkFBRUNnZ0VBU3duOWMycmx0Yk1SMjFMMXNHREQrLzFETFlKZ0xORFpTcG54di9HMXZWaVoKRUloUXNTbEFSNXJNbk1kSUxLTW5DaHRvZ1krSkxBcGtndXNGM0dkdWhjWjdiQkZocTNiazA0L2p3Q2VIM0Q2TwpBVkdTZjRXOERWcnpaaFZ0ZDRGMGtPbTVyQVlrQ05YYy8yZEtaMVVWSjVObmF5c1BRRHZGdm9NY1pGcTFPTjAzCklUbnJlNG9zbTkva2pPYTFxWDlsZ045aDBBVFJmQkhNbFdOZmlaWnRxWjBaR21kRHdZRVR5TGRmMUE2allhVGkKeXFNelVKYlJ5ZWdQT3lEK3pwV01qeW1IanVSdjNsZUR3dGpOL0YrZ2RPRXNHdWFpWktIZm8zQlRrbml0YmxtbApabnNsZnVGV296RTRScmJ0cnVDNW5yZ3d6ZXgyNVhoc2RpQmQ1amZVY1FLQmdRRDFlYmhsVEhkOVZSV1FiVEZuCmlHN2hMemY5aS95RmVsZUFZVGxEbC9FL1V1Z1NHNk5wb2xSa2VUSUwzQzJsbDN5c1k4REU1WUY0dm9KdExxSTYKUlRlS2UrNmZ0YW05aHJyTTMrOEE3UjRWc3dGeDVhR25KNEdsSzE0N3Jnc21ZRDZ0M2xPdDY2OTJrNWd2Z3g5TApiZitHaUpuTTZqQ0N1VENrWi9mVlF6TGMvUUtCZ1FESHl2SEd2NGhoR2JEN0JOMVBmcWJ4aHNwQXlZellhVnVHClFsOS9YazFsc1B4SFg0blQzdU9xK3doVkx3WmJ0YkZxL1VzZ2tIaUx2TDdEeTAvUVFLWlZmL3dqSkNWc1RBS2oKNTdacFE4YnY1N2dtazRJbU5NVmoyMkVtNktlcUYxMU1PN2pFV3FVaHc3Z2xaY1ZuYU0vbW13UHJ6bWxNOW4wcwpXME1OZXo3aVp3S0JnUURqbXU3TWpqQWt0NlY4K3FIYVczaGp0d0oxUnp6bkRsN2ZuRVlhVkdITjB6TjJ4c1dvCkJtbTFsMkk5K1BNaUhPbnVkYmVoV1NQSkx1dUVETDlDeERjUllvUUk5Y25pLzI5bzB5R3FmREZ1OFVFZnVFbEEKMGJLMTBSWll3N0YyN2Jwd1FEcmFnak41QUxVVktNRDFrWkpoelhxOXMwOHpoajZCMGh6TFVybHdpUUtCZ0RxNgpMTmQrOVZlVmRiQlRmYm9nUUhJK2JMVWVpWWdUY0JQRzdzdEJyUDUzUjdDekpKQml0QWxPUU9USkxkVkhVeDlmCjFQVjlnZkdSU1lIRUFYSDFqdThTNzhwa2xadC92RWJ4bFd6YnYxNUZmcHZZUUNsNjJZckFzWTMrVlVwcUU4S1UKeTNyc0toNENxZDVVUy9KWm5NTHNUZnJDY2JGdHd0Mkc5ZTdBaTN1QkFvR0JBS0x1dGViV3FuRy9maWZUNmc4bAp3YmN3OHdPZzZ3NmRudmt4dG5HU2p2dFF2cS9QTldTdU5kWVVocUdrK0dwdjNCbnNhS3pvRXZKSmVUdXZsVGxwCjJYT1lLcUgzWExmeTRoU1A4MDdhNUYzZFQ4bHkxdW00V3JoQkFvMnUzV0xyU0E1d2VLdU1PUkJkVXNEaHQrclcKdmxOUXB2VUVIQ2RjY28rSHZWUXZFYU9lCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=

# For this, you can generate either keys with passwords or without passwords. Having password-protected keys is relevant
# even if we are adding the content of the keys. If password-protected keys are generated need to push the unprotected
# version of the privatekey as follows :
#  1. Generate the key: openssl genpkey -algorithm RSA -out private.key -aes256 -pkeyopt rsa_keygen_bits:2048
#  2. Generate the certificate: openssl req -x509 -days 365 -key private.key -out certificate.crt \
#                               -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                               -extensions v3_req -config <(echo "[req]"; \
#                               echo distinguished_name=req; \
#                               echo "[v3_req]"; \
#                               echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:devportal.am.wso2.com,DNS:gateway.am.wso2.com,DNS:publisher.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com"; \
#                               echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment")
#  3. Generate keystore if required: openssl pkcs12 -export -in certificate.crt -inkey private.key -out keystore.p12 -name wso2carbon
#                                    keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore wso2carbon.jks -deststoretype JKS
#                                    keytool -export -keystore wso2carbon.jks -alias wso2carbon -file wso2carbon.crt
#                                    keytool -import -alias wso2carbon -file wso2carbon.crt -keystore client-truststore.jks
#  4. Generate un protected version of the private key: openssl rsa -in private.key -out private-unlocked.key
#
# If there is no requirement to use password-protected keys:
#  1. Generate the key and certificate: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt \
#                                       -subj "/C=SL/ST=Southern Province/L=Galle/O=jcmw/OU=jcmw.com/CN=*.am.wso2.com" \
#                                       -extensions v3_req -config <(echo "[req]"; \
#                                       echo "distinguished_name=req"; \
#                                       echo "[v3_req]"; \
#                                       echo "keyUsage=digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment"; \
#                                       echo "extendedKeyUsage=serverAuth,clientAuth"; \
#                                       echo "subjectAltName=DNS:*.am.wso2.com,DNS:analytics.am.wso2.com,DNS:devportal.am.wso2.com,DNS:gateway.am.wso2.com,DNS:publisher.am.wso2.com,DNS:traffic.manager.am.wso2.com,DNS:key.manager.am.wso2.com")
#
# Then, base64 encode the content and add it to tls.crt and tls.key:
#  1.  cat certificate.crt | base64 -w 0
#  2.  cat private.key | base64 -w 0
